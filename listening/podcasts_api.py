import os
import asyncio
import aiohttp
from uuid import uuid4
from langdetect import detect
from supabase import create_client
from dotenv import load_dotenv
from fastapi import APIRouter, HTTPException, Query
import html

load_dotenv()
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
LISTEN_API_KEY = os.getenv("LISTEN_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
router = APIRouter()

MAX_DURATION_SEC = 15 * 60  # 15 –º–∏–Ω—É—Ç

# üîç –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞
async def validate_podcast(item, session, user_level, seen_titles):
    try:
        title = html.unescape(item.get("title_original", "")).strip()
        description = html.unescape(item.get("description_original", "")).strip()
        duration = item.get("audio_length_sec", 0)
        audio_url = item.get("audio", "").strip()

        if title in seen_titles:
            print(f"‚è© –î—É–±–ª–∏–∫–∞—Ç: {title}", flush=True)
            return None
        seen_titles.add(title)

        if duration > MAX_DURATION_SEC:
            print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω (–¥–ª–∏–Ω–∞ > 15 –º–∏–Ω): {title}", flush=True)
            return None

        language = detect(description) if description else "en"
        if language != "en":
            print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ en): {title}", flush=True)
            return None

        must_have_keywords = ["learn", "study", "practice", "lesson", "english"]
        if not any(word in description.lower() for word in must_have_keywords):
            print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤): {title}", flush=True)
            return None

        blacklist = [
            "italian", "german", "french", "spanish", "portuguese", "russian", "chinese", "japanese",
            "travel blog", "holiday planner", "tourism podcast"
        ]
        if any(bad in title.lower() or bad in description.lower() for bad in blacklist):
            print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω (blacklist): {title}", flush=True)
            return None

        if not audio_url:
            print(f"‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç audio_url): {title}", flush=True)
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        audio_headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
            "Accept": "*/*",
            "Range": "bytes=0-1"
        }

        async with session.get(audio_url, headers=audio_headers, allow_redirects=True) as audio_resp:
            if audio_resp.status >= 400:
                print(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({audio_resp.status}): {audio_url}", flush=True)
                return None

            content_type = audio_resp.headers.get("Content-Type", "")
            if not content_type.startswith("audio"):
                print(f"‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ audio Content-Type): {audio_url} ‚Äî {content_type}", flush=True)
                return None

        return {
            "title": title,
            "audio_url": audio_url,
            "image": item.get("image"),
            "level": user_level,
            "duration": duration
        }

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∫–∞—Å—Ç–∞: {e}", flush=True)
        return None

# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def fetch_podcasts(user_level, topic=None):
    query = f"Learn English {topic}" if topic else "Learn English"
    url = "https://listen-api.listennotes.com/api/v2/search"
    headers = {"X-ListenAPI-Key": LISTEN_API_KEY}
    params = {
        "q": query,
        "type": "episode",
        "language": "English",
        "len_max": 15,
        "sort_by_date": 0,
        "offset": 0,
        "only_in": "title,description",
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status != 200:
                    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ ListenNotes API: {await response.text()}")

                data = await response.json()
                seen_titles = set()

                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã
                tasks = [
                    validate_podcast(item, session, user_level, seen_titles)
                    for item in data.get("results", [])
                ]
                results = await asyncio.gather(*tasks)
                podcasts = [p for p in results if p is not None]

                print(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(podcasts)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∫–∞—Å—Ç–æ–≤", flush=True)
                return podcasts[:3]

    except aiohttp.ClientError as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ListenNotes API: {str(e)}")
    except asyncio.TimeoutError:
        raise HTTPException(status_code=500, detail="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ.")






async def transcribe_audio(audio_url: str) -> str:
    headers = {"Authorization": f"Token {DEEPGRAM_API_KEY}"}
    params = {"model": "general", "tier": "base", "language": "en"}

    print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_url}", flush=True)


    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(audio_url, headers={
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                "Accept": "*/*",
                "Accept-Encoding": "gzip, deflate, br",
                "Connection": "keep-alive",
            }) as audio_resp:

                if audio_resp.status != 200:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {await audio_resp.text()}", flush=True)
                    return ""

                print(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Deepgram...", flush=True)
                content_type = audio_resp.headers.get("Content-Type", "")
                if not content_type.startswith("audio"):
                    print(f"‚ö†Ô∏è –ù–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª! –ü–æ–ª—É—á–µ–Ω Content-Type: {content_type}")
                    return ""

                audio_data = await audio_resp.read()

                async with session.post("https://api.deepgram.com/v1/listen", headers=headers, params=params, data=audio_data) as resp:
                    if resp.status != 200:
                        print(f"–û—à–∏–±–∫–∞ Deepgram API: {await resp.text()}")
                        return ""

                    result = await resp.json()
    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}")
        return ""

    print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!")
    return result.get("results", {}).get("channels", [{}])[0].get("alternatives", [{}])[0].get("transcript", "")

async def process_podcasts(user_id: str, topic: str, podcasts: list):
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è user_id={user_id}, topic={topic}", flush=True)

    existing_transcripts = supabase.from_("user_transcripts").select("topic").eq("user_id", user_id).execute()
    existing_topics = {t["topic"].lower() for t in existing_transcripts.data}

    if topic.lower() in existing_topics:
        print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è user_id={user_id}, topic={topic}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.", flush=True)
        return

    print(f"üéô –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–æ–≤: {len(podcasts)} —à—Ç.", flush=True)

    for podcast in podcasts:
        transcript = await transcribe_audio(podcast["audio_url"])
        if transcript.strip():
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–∞: {podcast['title']}", flush=True)
            supabase.from_("user_transcripts").insert({
                "id": str(uuid4()),
                "user_id": user_id,
                "podcast_title": podcast["title"],
                "transcript": transcript,
                "topic": topic,
                "created_at": "now()"
            }).execute()
        else:
            print(f"–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è –¥–ª—è {podcast['title']} –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", flush=True)

@router.get("/podcasts")
async def get_podcasts(user_id: str, topic: str = Query(None)):
    try:
        response = supabase.from_("users_progress").select("level").eq("user_id", user_id).single().execute()
        if not response.data:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        user_level = response.data["level"]
        podcasts = await fetch_podcasts(user_level, topic)

        if not podcasts:
            return {"message": "–ü–æ–¥–∫–∞—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", "podcasts": []}

        print(f"–ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ –¥–ª—è user_id={user_id}, topic={topic}", flush=True)
        asyncio.create_task(process_podcasts(user_id, topic, podcasts))

        return {"podcasts": podcasts, "transcription_status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
