import os
import requests
from langdetect import detect
from supabase import create_client
from dotenv import load_dotenv
from fastapi import APIRouter, HTTPException, Query

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
LISTEN_API_KEY = os.getenv("LISTEN_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# –°–æ–∑–¥–∞–µ–º FastAPI Router
router = APIRouter()

def fetch_podcasts(user_level, topic=None):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç "English" + —É—Ä–æ–≤–µ–Ω—å –∏ —Ç–µ–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    query = f"English {user_level}"
    if topic:
        query += f" {topic}"
    
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä language=English, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–æ–¥–∫–∞—Å—Ç—ã
    url = f"https://listen-api.listennotes.com/api/v2/search?q={query}&type=episode&language=English"
    headers = {"X-ListenAPI-Key": LISTEN_API_KEY}
    response = requests.get(url, headers=headers)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ API ListenNotes: {response.status_code} - {response.text}")
        return []
    
    data = response.json()
    podcasts = []
    
    for item in data.get("results", []):
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º langdetect
        try:
            description = item.get("description_original", "")
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–∏–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å)
            language = detect(description) if description.strip() != "" else "en"
            if language != "en":
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–∞—Å—Ç, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        except Exception as e:
            # –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
            continue
        
        if "audio" in item and item["audio"]:
            podcasts.append({
                "title": item["title_original"],
                "audio_url": item["audio"],
                "image": item["image"],
                "level": user_level
            })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–æ 3 –ø–æ–¥–∫–∞—Å—Ç–æ–≤
    return podcasts[:3]

@router.get("/podcasts")
async def get_podcasts(user_id: str, topic: str = Query(None)):
    try:
        response = supabase.from_("users_progress").select("level").eq("user_id", user_id).single().execute()
        if not response.data:
            raise HTTPException(status_code=404, detail="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        user_level = response.data["level"]
        podcasts = fetch_podcasts(user_level, topic)
        if not podcasts:
            return {"message": "‚ùó –ü–æ–¥–∫–∞—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É.", "podcasts": []}
        return {"podcasts": podcasts}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
