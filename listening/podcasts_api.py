import os
import asyncio
import aiohttp
from uuid import uuid4
from langdetect import detect
from supabase import create_client
from dotenv import load_dotenv
from fastapi import APIRouter, HTTPException, Query
import html


load_dotenv()
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
LISTEN_API_KEY = os.getenv("LISTEN_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")


supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

router = APIRouter()

async def fetch_podcasts(user_level, topic=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–∫–∞—Å—Ç—ã –∏–∑ ListenNotes API –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏."""
    query = f"English {user_level}"
    if topic:
        query += f" {topic}"
    
    url = f"https://listen-api.listennotes.com/api/v2/search?q={query}&type=episode&language=English"
    headers = {"X-ListenAPI-Key": LISTEN_API_KEY}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status != 200:
                    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ ListenNotes API: {await response.text()}")
                
                data = await response.json()
                podcasts = []
                for item in data.get("results", []):
                    try:
                        title = html.unescape(item.get("title_original", ""))
                        description = html.unescape(item.get("description_original", ""))

                        language = detect(description) if description.strip() else "en"
                        if language != "en":
                            continue
                        
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                        if user_level.lower() not in title.lower():
                            continue
                    except Exception:
                        continue
                    
                    if "audio" in item and item["audio"]:
                        podcasts.append({
                            "title": title,
                            "audio_url": item["audio"],
                            "image": item["image"],
                            "level": user_level
                        })
                return podcasts[:3]
    
    except aiohttp.ClientError as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ListenNotes API: {str(e)}")
    except asyncio.TimeoutError:
        raise HTTPException(status_code=500, detail="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ListenNotes API –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def transcribe_audio(audio_url: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Deepgram –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    headers = {"Authorization": f"Token {DEEPGRAM_API_KEY}"}
    params = {"model": "general", "tier": "base", "language": "en"}

    print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_url}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(audio_url) as audio_resp:
                if audio_resp.status != 200:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {await audio_resp.text()}")
                    return ""
                
                print(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Deepgram...")
                audio_data = await audio_resp.read()
                
                async with session.post("https://api.deepgram.com/v1/listen", headers=headers, params=params, data=audio_data) as resp:
                    if resp.status != 200:
                        print(f"–û—à–∏–±–∫–∞ Deepgram API: {await resp.text()}")
                        return ""
                    
                    result = await resp.json()
    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}")
        return ""
    
    print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!")
    return result.get("results", {}).get("channels", [{}])[0].get("alternatives", [{}])[0].get("transcript", "")

async def process_podcasts(user_id: str, topic: str, podcasts: list):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ —Ç–µ–º–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä), –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç."""
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è user_id={user_id}, topic={topic}")
    
    existing_transcripts = supabase.from_("user_transcripts").select("topic").eq("user_id", user_id).execute()
    
    existing_topics = {t["topic"].lower() for t in existing_transcripts.data}
    
    if topic.lower() in existing_topics:
        print(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è user_id={user_id}, topic={topic}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        return
    
    print(f"üéô –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–æ–≤: {len(podcasts)} —à—Ç.")
    
    for podcast in podcasts:
        transcript = await transcribe_audio(podcast["audio_url"])
        if transcript.strip():
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–∞: {podcast['title']}")
            supabase.from_("user_transcripts").insert({
                "id": str(uuid4()),
                "user_id": user_id,
                "podcast_title": podcast["title"],
                "transcript": transcript,
                "topic": topic,
                "created_at": "now()"
            }).execute()
        else:
            print(f"–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è –¥–ª—è {podcast['title']} –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.get("/podcasts")
async def get_podcasts(user_id: str, topic: str = Query(None)):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–∫–∞—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."""
    try:
        response = supabase.from_("users_progress").select("level").eq("user_id", user_id).single().execute()
        if not response.data:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user_level = response.data["level"]
        podcasts = await fetch_podcasts(user_level, topic)
        
        if not podcasts:
            return {"message": "–ü–æ–¥–∫–∞—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", "podcasts": []}
        
        print(f"–ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ –¥–ª—è user_id={user_id}, topic={topic}")
        asyncio.create_task(process_podcasts(user_id, topic, podcasts))
        
        return {"podcasts": podcasts, "transcription_status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
