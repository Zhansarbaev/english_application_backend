import os
import openai
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

router = APIRouter()

# üîπ –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class AnswerRequest(BaseModel):
    user_id: str
    answer: str

@router.post("/listening/check_answer")
async def check_answer(request: AnswerRequest):
    try:
        # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{request.answer}\". "
            f"–í–µ—Ä–Ω—ã–π –ª–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ —Å–º—ã—Å–ª—É? "
            f"–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."
        )

        response = openai.ChatCompletion.create(
            model="gpt-4o",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "gpt-4o-mini" –µ—Å–ª–∏ —ç–∫–æ–Ω–æ–º–∏—à—å
            messages=[{"role": "user", "content": prompt}]
        )

        # üîπ GPT –æ—Ç–≤–µ—Ç–∏—Ç "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"
        ai_response = response["choices"][0]["message"]["content"].strip().lower()

        if "–¥–∞" in ai_response:
            return {"message": "‚úÖ –ñ–∞—É–∞–ø –¥“±—Ä—ã—Å!", "success": True}
        elif "–Ω–µ—Ç" in ai_response:
            return {"message": "‚ùå “ö–∞—Ç–µ –∂–∞—É–∞–ø! “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.", "success": False}
        else:
            return {"message": "‚ö† GPT –∂–∞—É–∞–ø—Ç—ã —Ç“Ø—Å—ñ–Ω–±–µ–¥—ñ. “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.", "success": False}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"GPT “õ–∞—Ç–µ—Å—ñ: {str(e)}")
