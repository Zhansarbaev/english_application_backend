import os
import json
import re
import openai
from supabase import create_client
from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
from dotenv import load_dotenv
from typing import List

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")


supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
openai.api_key = OPENAI_API_KEY


router = APIRouter()


class AnswerRequest(BaseModel):
    user_id: str
    answers: List[str]
    topic: str

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON, –µ—Å–ª–∏ –æ–Ω –æ–±—Ä–µ–∑–∞–Ω
def fix_broken_json(response_text: str) -> str:
    match = re.search(r'\{.*\}', response_text, re.DOTALL)
    if match:
        fixed_json = match.group(0)
        if not fixed_json.endswith("}"):
            fixed_json += "}"
        return fixed_json
    return ""

@router.post("/check_answer")
async def check_answer(request: AnswerRequest):
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 3 –æ—Ç–≤–µ—Ç–∞
    if len(request.answers) != 3:
        raise HTTPException(status_code=400, detail="–ù—É–∂–Ω–æ 3 –æ—Ç–≤–µ—Ç–∞")

    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data_resp = (
        supabase.from_("user_transcripts")
        .select("id, podcast_title, transcript, topic, created_at")
        .eq("user_id", request.user_id)
        .eq("topic", request.topic)
        .order("created_at", desc=True)  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
        .limit(3)
        .execute()
    )

    transcripts = [
        (item["id"], item["podcast_title"], item["transcript"])
        for item in data_resp.data
    ]

    if len(transcripts) < 3:
        raise HTTPException(status_code=404, detail="–ù–µ—Ç 3 –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –ø–æ —Ç–µ–º–µ")

    evaluation_results = []

    for i in range(3):
        transcript_id, podcast_title, transcript = transcripts[i]
        answer = request.answers[i]

        # –°—Ç—Ä–æ–≥–∏–π Prompt –¥–ª—è OpenAI (—Ç–æ–ª—å–∫–æ JSON)
        system_prompt = (
            "–°–µ–Ω —Ç–µ–∫ JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ—Ç—ñ–Ω –∫”©–º–µ–∫—à—ñ—Å—ñ“£. "
            "“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Å”©–π–ª–µ–π—Å—ñ“£. –ê—Ä—Ç—ã“õ –º”ô—Ç—ñ–Ω –Ω–µ–º–µ—Å–µ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ –∂–∞–∑–±–∞. "
            "JSON —Ñ–æ—Ä–º–∞—Ç—ã: {\"correct\": true/false, \"feedback\": \"...\"}."
            "–ï–≥–µ—Ä JSON –±–µ—Ä–µ –∞–ª–º–∞—Å–∞“£, –æ—Å—ã–ª–∞–π “õ–∞–π—Ç–∞—Ä: {\"correct\": false, \"feedback\": \"\"}."
        )
        user_prompt = (
            f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∂–∞—É–∞–±—ã: {answer}\n"
            "–û—Å—ã –∂–∞—É–∞–ø –¥“±—Ä—ã—Å –ø–∞, ”ô–ª–¥–µ —Ç–æ–ª—ã“õ –µ–º–µ—Å –ø–µ? "
            "–¢–µ–∫ JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞—É–∞–ø –±–µ—Ä, –º—ã—Å–∞–ª—ã: {\"correct\": false, \"feedback\": \"–ñ–∞—É–∞–ø —Ç–æ–ª—ã“õ –µ–º–µ—Å\"}."
        )

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        try:
            gpt_response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=100,  
                temperature=0
            )
        except openai.error.OpenAIError as e:
            raise HTTPException(status_code=500, detail=f"OpenAI API error: {str(e)}")

        raw_text = gpt_response["choices"][0]["message"]["content"]
        print(f"GPT raw: {raw_text}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT

        # 4 –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            result = json.loads(raw_text)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ JSON —Å–ª–æ–º–∞–Ω –ø—Ä–æ–±—É—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            fixed = fix_broken_json(raw_text)
            if fixed:
                try:
                    result = json.loads(fixed)
                except:
                    result = {"correct": False, "feedback": ""}
            else:
                result = {"correct": False, "feedback": ""}

        correct = result.get("correct", False)
        feedback = result.get("feedback", "")

        # –û–±–Ω–æ–≤–ª—è–µ–º `success` –¢–û–õ–¨–ö–û —É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –∑–∞–ø–∏—Å–µ–π
        supabase.from_("user_transcripts").update({"success": correct}).eq("id", transcript_id).execute()

        evaluation_results.append({
            "podcast_title": podcast_title,
            "message": feedback,
            "success": correct
        })

    # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
    return JSONResponse({"evaluations": evaluation_results})
