from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from supabase import create_client, Client
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

router = APIRouter()

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class UnlockRequest(BaseModel):
    user_id: str

@router.post("/listening/unlock_card")
async def unlock_new_card(request: UnlockRequest):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ `unlocked_level`
        user_progress = supabase.from_("users_progress").select("level").eq("user_id", request.user_id).single().execute()


        if not user_progress.data:
            raise HTTPException(status_code=404, detail="–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª“ì–∞–Ω –∂–æ“õ.")

        user_level = user_progress.data["level"]
        unlocked_level = user_progress.data["unlocked_level"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        next_card = (
            supabase.from_("vocabulary_super")
            .select("id")
            .eq("level", user_level)
            .eq("unlocked_level", unlocked_level + 1)
            .maybe_single()
            .execute()
        )

        if not next_card.data:
            return {"message": "üîì –ë–∞—Ä–ª—ã“õ –∫–∞—Ä—Ç–æ—á–∫–∞–ª–∞—Ä –∞—à—ã“õ!"}

        # –û–±–Ω–æ–≤–ª—è–µ–º `unlocked_level`
        supabase.from_("users_progress").update({"unlocked_level": unlocked_level + 1}).eq("user_id", request.user_id).execute()

        return {"message": "‚úÖ –ñ–∞“£–∞ —Å”©–∑ –∞—à—ã–ª–¥—ã!"}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"“ö–∞—Ç–µ: {str(e)}")
