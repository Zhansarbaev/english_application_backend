import os
import openai
from supabase import create_client, Client
from dotenv import load_dotenv
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–ª—é—á–∏ –∏–∑ .env
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
openai.api_key = OPENAI_API_KEY

# ‚ö° –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –±–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
def fetch_word_without_transcription():
    response = supabase.table("vocabulary_super").select("id, word").is_("transcription", None).limit(1).execute()
    return response.data[0] if response.data else None

# ‚ö° –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –±–∞–∑–µ
def update_transcription(word_id, transcription):
    supabase.table("vocabulary_super").update({"transcription": transcription}).eq("id", word_id).execute()

# ‚ö° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –≤ [—Å–∫–æ–±–∫–∞—Ö]
def get_transcription(word):
    prompt = f"–î–∞–π —Ç–æ–ª—å–∫–æ IPA-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–ª–æ–≤–∞ {word} –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö. –ü—Ä–∏–º–µ—Ä: [te…™bl]"

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—à–µ–≤—É—é –∏ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
            messages=[{"role": "user", "content": prompt}],
            temperature=0  # –£–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        )
        transcription = response["choices"][0]["message"]["content"].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç [ ], –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
        if not transcription.startswith("[") or not transcription.endswith("]"):
            transcription = f"[{transcription}]"

        return transcription
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
        return None

# ‚ö° –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å (—É—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ 1 —Å–ª–æ–≤—É)
def main():
    start_time = time.time()
    processed_count = 0

    while True:
        word_data = fetch_word_without_transcription()
        if not word_data:
            print(f"‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} —Å–ª–æ–≤")
            break

        word_id = word_data["id"]
        word = word_data["word"]

        print(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {word}...")
        transcription = get_transcription(word)

        if transcription:
            update_transcription(word_id, transcription)
            processed_count += 1
            print(f"‚úÖ {word}: {transcription}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {word}")

        time.sleep(0.2)  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è

    elapsed_time = time.time() - start_time
    print(f"‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫ (~{elapsed_time/60:.2f} –º–∏–Ω)")

if __name__ == "__main__":
    main()
